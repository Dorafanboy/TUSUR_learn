;gnu clisp  2.49.60
1. Напишите функцию, вычисляющую предпоследний элемент списка


(defun prelast(arr)
    (
         car (cdr (reverse arr))
    )
)

(print (prelast `(3 8 92 847 35 82)))


2. Напишите функцию (fullength х), считающую полное количество атомов (не равных
nil) в списке х. Исходный список может быть многоуровневым.

(defun fullength(x)
 (
      cond 
          ((null x) 0) 
          ((atom x) 1)
          (t (+ (fullength (car x))
                (fullength (cdr x))
              ))
     
 )   
)

(print (fullength `(2 7 8 2 3)))


3. Напишите функцию от двух аргументов х и n , которая создает список из n раз
повторенных списков ,состоящих из одного элемента х.

(defun mlst(x n)
    (
     cond ((> n 0) (cons (list x) (mlst x (1- n))))
     
    )
)

(print (mlst 3 5))


Объединить позиции с одинаковым наименованием товаров, количество просуммировать,
информацию о скидке и цене взять из первой позиции данного наименования. Таким образом
сформировать новый список чека.

;gnu clisp  2.49.60
(defun merge-check-items (check)
  (if (null check)
      nil
      (let ((item (car check))
            (rest (cdr check)))
        (let ((name (first item))
              (quantity (second item))
              (price (third item))
              (discount (fourth item)))
          (let ((merged-item
                 (reduce (lambda (acc x)
                           (if (equal name (first x))
                               (list name (+ quantity (second x)) price discount)
                               acc))
                         rest
                         :initial-value (list name quantity price discount))))
            (cons merged-item (merge-check-items (remove-if (lambda (x) (equal name (first x))) rest))))))))

(defvar *check*
  '((item1 2 10.0 0.0)
    (item2 1 5.0 0.0)
    (item1 1 10.0 0.0)
    (item3 2 15.0 0.0)))

(setq *check* (merge-check-items *check*))

; Выводим результат
(dolist (item *check*)
  (format t "Наименование: ~a, Количество: ~a, Цена: ~a, Скидка: ~a~%" (first item) (second item) (third item) (fourth item)))




