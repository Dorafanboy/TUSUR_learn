import numpy as np
from sympy import *
import dearpygui.dearpygui as dpg

from sympy.parsing.sympy_parser import standard_transformations, implicit_multiplication_application

x1, x2 = var('x_1 x_2')
ITERATIONS = 50


class ExpressionMin:
    def __init__(self, from_source) -> None:
        if from_source == "from file":
            filename = dpg.get_value('filename')
            with open(filename, "rt") as file:
                expression = file.readline()
                transformations = (standard_transformations + (implicit_multiplication_application,))
                self.function: Expr = parse_expr(expression, transformations=transformations)
                self.x_0 = list(map(float, file.readline().split()))  # –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
                self.delta = float(file.readline())  # –¥–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞ —Å–∏–º–ø–ª–µ–∫—Å–∞
                self.alpha = float(file.readline())  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
                self.eps_x = float(file.readline())  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É x
                self.eps_y = float(file.readline())  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É y
        elif from_source == "from field":
            expression = dpg.get_value('expr')
            transformations = (standard_transformations + (implicit_multiplication_application,))
            self.function: Expr = parse_expr(expression, transformations=transformations)
            self.x_0 = dpg.get_value('x_0')  # –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            self.delta = dpg.get_value('delta')  # –¥–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞ —Å–∏–º–ø–ª–µ–∫—Å–∞
            self.alpha = dpg.get_value('alpha')  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
            self.eps_x = dpg.get_value('eps_x')  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É x
            self.eps_y = dpg.get_value('eps_y')  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É y

    def __str__(self):
        return f"{self.function=}" + f"{self.x_0=}" + f"{self.delta=}" + f"{self.alpha=}" + f"{self.eps_x=}" + f"{self.eps_y=}"


def simplex_method(expr: ExpressionMin):
    function, x_0, delta, alpha, eps_x, eps_y = expr.function, expr.x_0, expr.delta, expr.alpha, expr.eps_x, expr.eps_y
    n = 2
    # –°–∏–º–ø–ª–µ–∫—Å 0
    V = np.ones((n + 1, n))
    V[0] = x_0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω—É–ª–µ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ–º

    p_n = delta * (sqrt(n + 1) + n - 1) / (n * sqrt(2))
    g_n = p_n - delta * sqrt(2) / 2
    for row in range(1, n + 1):
        for column in range(n):
            if row - 1 == column:
                V[row][column] = V[0][column] + p_n
            else:
                V[row][column] = V[0][column] + g_n
    # –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º–∞ - –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Å–∏–º–ø–ª–µ–∫—Å–∞
    x_approx_prev = [sum(V[:, i]) / (n + 1) for i in range(n)]
    F_approx_prev = function.subs({x1: x_approx_prev[0], x2: x_approx_prev[1]})
    iter = 0
    while iter < ITERATIONS:
        F_x = np.array([function.subs({x1: V[i][0], x2: V[i][1]}) for i in range(n + 1)])
        p = F_x.argmax()
        V_p = np.zeros(n)
        for row in range(n + 1):
            if row != p:
                V_p += V[row]
        V_p = V_p * (2 / n) - V[p]
        F_p = function.subs({x1: V_p[0], x2: V_p[1]})
        if F_p <= F_x[p]:
            V[p] = V_p  # –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–º–ø–ª–µ–∫—Å
        else:
            delta *= alpha # –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∂–∞—Ç–∏–µ
            m = F_x.argmin()  # –∏–Ω–¥–µ–∫—Å –≤–µ—Ä—à–∏–Ω—ã —Å –º–∏–Ω.–∑–Ω–∞—á
            V = alpha * V + (1 - alpha) * V[m]  # –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (1/2) —Ä–µ–±—Ä–∞

        # –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º–∞ - –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Å–∏–º–ø–ª–µ–∫—Å–∞
        x_approx_curr = [sum(V[:, i]) / (n + 1) for i in range(n)]
        F_approx_curr = function.subs({x1: x_approx_curr[0], x2: x_approx_curr[1]})
        # –ï–≤–∫–ª–∏–¥–æ–≤–∞ –Ω–æ—Ä–º–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–π —Ç–æ—á–µ–∫ –æ–ø—Ç–∏–º—É–º–∞
        diff_x = np.sqrt(sum(pow(a - b, 2) for a, b in zip(x_approx_prev, x_approx_curr)))
        diff_y = abs(F_approx_curr - F_approx_prev)
        if diff_x < eps_x and diff_y < eps_y:  # —É—Å–ª–æ–≤–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∞
            break
        else:
            x_approx_prev = x_approx_curr
            F_approx_prev = F_approx_curr
        iter +=1
    if iter == ITERATIONS:
        x_approx_curr = np.zeros(n)
    return x_approx_curr


def upper_index(base: str, index: int) -> str:
    match index:
        case 1:
            return f"{base}¬π"
        case 2 | 3:
            return f"{base}{chr(ord('¬≤') + index - 2)}"
        case 4 | 5 | 6 | 7 | 8 | 9:
            return f"{base}{chr(ord('‚Å∞') + index)}"
        case __:
            return f"{base}‚Å∫"


def hook_jeeves_method(expr: ExpressionMin):
    filename = "expr.txt"
    with open(filename, "rt") as file:
        expression = file.readline()
        transformations = (standard_transformations + (implicit_multiplication_application,))
        function: Expr = parse_expr(expression, transformations=transformations)  # ∆í(x)
        x_0 = np.array(list(map(float, file.readline().split())))  # –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ <print(f'ùíô‚Å∞ = {x_0}')>
        delta = np.array(
            list((map(float, file.readline().split()))))  # –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è (–≤–µ–ª–∏—á–∏–Ω–∞ —à–∞–≥–∞) Œî <print(f"Œî‚Å∞ = {delta}")>
        alpha = float(file.readline())  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è (ùõÇ > 1) <print(f"ùõÇ = {alpha}")>
        eps_x = float(file.readline())  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É x (Œµ‚Çì) <print(f"Œµ‚Çì = {eps_x}")>
        eps_y = float(file.readline())  # —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ y (Œµ·µß) <print(f"Œµ·µß = {eps_y}")>

    n = 2
    e_i = np.eye(n)  # –µ–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ ùêû
    x_approx_1 = x_0.copy()
    f_approx_1 = function.subs({x1: x_approx_1[0], x2: x_approx_1[1]})
    x_approx_0, f_approx_0 = x_approx_1.copy(), f_approx_1

    for k in range(ITERATIONS):
        print(f"\n\t\t\t–ò–¢–ï–†–ê–¶–ò–Ø: k = {k}")
        print(f"{upper_index('xÃÖ', k)} = {x_approx_1}")  # –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ xÃÖ·∂¶ (xÃÖ‚Å∞ = ùíô‚Å∞)
        f_approx_1 = function.subs({x1: x_approx_1[0], x2: x_approx_1[1]})
        print(f"∆í({upper_index('xÃÖ', k)}) = {f_approx_1}")
        x_p = np.array(x_approx_1)  # –∏—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ - (ùíô·µ®‚Å∞ = xÃÖ·µè)
        print("\n\t\t–ò–°–°–õ–ï–î–£–Æ–©–ò–ô –ü–û–ò–°–ö")
        # - –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π (–∏—Å—Ö–æ–¥–Ω–æ–π) —Ç–æ—á–∫–∏ ùíô·µ®·∂¶‚Åª¬π
        success = False
        for i in range(n):
            print(f"{upper_index('ùíô·µ®', i)} = {x_p}")
            f_x_p = function.subs({x1: x_p[0], x2: x_p[1]})
            print(f"∆í({upper_index('ùíô·µ®', i)}) = {f_x_p}")
            # x_i - ùíô·∂¶ - –ø—Ä–æ–±–Ω–∞—è —Ç–æ—á–∫–∞
            # –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è Œî·µ¢·µè
            x_i = x_p + delta * e_i[i]  # ùíô·∂¶ = ùíô·µ®·∂¶‚Åª¬π + Œî·µ¢·µè * ùêû·µ¢
            print(f"–ü—Ä–æ–±–Ω–∞—è —Ç–æ—á–∫–∞ ‚Ññ{i + 1}: {upper_index('ùíô', i + 1)} = {x_i}")
            f_x_i = function.subs({x1: x_i[0], x2: x_i[1]})
            if f_x_i < f_x_p:  # –µ—Å–ª–∏ –≤ –ø—Ä–æ–±–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –¶–§ –º–µ–Ω—å—à–µ, —á–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–π
                print(f"∆í({upper_index('ùíô', i + 1)}) = {f_x_i}\t < \t∆í({upper_index('ùíô', i)}·µ®) = {f_x_p}")
                # —Ç–æ —à–∞–≥ –ø–æ–∏—Å–∫–∞ —É–¥–∞—á–Ω—ã–π => ùíô·µ®·∂¶ = ùíô·∂¶
                x_p = x_i.copy()  # –Ω–æ–≤–æ–π –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ–±–Ω–∞—è
                print(f"–®–∞–≥ –ø–æ–∏—Å–∫–∞ —É–¥–∞—á–Ω—ã–π: {upper_index('ùíô·µ®', i + 1)} = {x_p}")
                success = True
            else:  # –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –¥–µ–ª–∞–µ—Ç—Å—è —à–∞–≥ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                print(f"∆í({upper_index('ùíô', i + 1)}) = {f_x_i}\t >= \t∆í({upper_index('ùíô', i)}·µ®) = {f_x_p}")
                # –¥–µ–ª–∞–µ–º —à–∞–≥ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                x_i = x_p - delta * e_i[i]  # ùíô·∂¶ = ùíô·µ®·∂¶‚Åª¬π - Œî·µ¢·µè * ùêû·µ¢
                print(f"–®–∞–≥ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {upper_index('ùíô', i + 1)} = {x_i}")
                f_x_i = function.subs({x1: x_i[0], x2: x_i[1]})
                if f_x_i < f_x_p:
                    print(
                        f"–®–∞–≥ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —É–¥–∞—á–Ω—ã–π: ∆í({upper_index('ùíô', i + 1)}) = {f_x_i}\t < \t∆í({upper_index('ùíô', i)}·µ®) = {f_x_p}")
                    success = True
                    x_p = x_i.copy()  # –Ω–æ–≤–æ–π –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–æ–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ–±–Ω–∞—è
                print(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞: {upper_index('ùíô·µ®', i + 1)} = {x_p}")
        if not success:
            print(f"\n\t\t–ò—Å—Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ –±—ã–ª –Ω–µ—É–¥–∞—á–Ω—ã–º. \n{upper_index('xÃÖ', k + 1)} = {x_approx_1}")
            # x_approx_1 = x_approx_0.copy()
            # f_approx_1 = f_approx_0
            delta = delta / alpha
            print(f"{upper_index('Œî', k + 1)} = {delta}")
            continue
        # –®–∞–≥ ‚Ññ5 - –ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É
        print("\n\t\t–ü–û–ò–°–ö –ü–û –û–ë–†–ê–ó–¶–£")
        print(f"{upper_index('Œî', k + 1)} = {delta}")
        # x_b - –±–∞–∑–æ–≤–∞—è —Ç–æ—á–∫–∞ = > ùíô·µ¶·µè = ùíô·µ®‚Åø
        x_b = x_p.copy()
        print(f"–ë–∞–∑–æ–≤–∞—è —Ç–æ—á–∫–∞: {upper_index('ùíô·µ¶', k)} = {x_b}")
        f_x_b = function.subs({x1: x_b[0], x2: x_b[1]})
        j = 1
        while True:
            # x_o - —Ç–æ—á–∫–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É - —à–∞–≥ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤–¥–æ–ª—å –ø—Ä—è–º–æ–π,
            # —Å–æ–µ–¥–∏–Ω—è—é—â–µ–π —ç—Ç—É —Ç–æ—á–∫—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–∞–∑–æ–≤–æ–π —Ç–æ—á–∫–æ–π
            x_o = x_p + j * (x_p - x_approx_1)
            print(f"j = {j}: –¢–æ—á–∫–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É: {upper_index('ùíô‚Çí', k)} = {x_o}")
            f_x_o = function.subs({x1: x_o[0], x2: x_o[1]})
            if f_x_o >= f_x_b:
                print(f"∆í({upper_index('ùíô‚Çí', k)}) = {f_x_o}\t >= \t∆í({upper_index('ùíô·µ¶', k)}·µ®) = {f_x_b}")
                j -= 1
                x_o = x_b.copy()
                f_x_o = f_x_b
                print(f"–ü—Ä–∏ j = {j}, –ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É –±—ã–ª —É–¥–∞—á–Ω—ã–º: {upper_index('ùíô‚Çí', k)} = {x_o}")
                break
            else:
                print(f"∆í({upper_index('ùíô‚Çí', k)}) = {f_x_o}\t < \t∆í({upper_index('ùíô·µ¶', k)}) = {f_x_b}")
                print(f"–ü–æ–∏—Å–∫ –ø–æ –æ–±—Ä–∞–∑—Ü—É —É–¥–∞—á–Ω—ã–π: {upper_index('ùíô‚Çí', k)} = {x_o}")
                x_b = x_o.copy()
                f_x_b = f_x_o
                j += 1

        x_approx_0 = x_approx_1.copy()
        f_approx_0 = f_approx_1
        x_approx_1 = x_o.copy()
        f_approx_1 = f_x_o
        print(f"\n\t\t\t–ù–æ–≤–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: {upper_index('xÃÖ', k + 1)} = {x_approx_1}")

        diff_x = np.sqrt(sum(pow(coord, 2) for coord in delta))
        diff_y = abs(f_approx_1 - f_approx_0)  # |∆í(xÃÖ¬π) - ∆í(xÃÖ‚Å∞)|
        print(f"|{upper_index('Œî', k + 1)}| = {diff_x}",
              f"Œµ‚Çì = {eps_x}",
              f"|∆í({upper_index('xÃÖ', k + 1)}) - ∆í({upper_index('xÃÖ', k)})| = {diff_y}",
              f"Œµ·µß = {eps_y}",
              f"∆í({upper_index('xÃÖ', k + 1)}) = {f_approx_1}",
              f"∆í({upper_index('xÃÖ', k)}) = {f_approx_0}", sep='\n')
        if diff_x <= eps_x and diff_y <= eps_y:
            break

